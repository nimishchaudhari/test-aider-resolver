name: Aider Resolver
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  process-with-aider:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.actor, '[bot]') && github.event.comment.user.type != 'Bot' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract event information
        id: extract-event
        run: |
          echo "EVENT_TYPE=${{ github.event_name }}" >> $GITHUB_ENV
          echo "COMMENT_ID=" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.comment.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "IS_PR=${{ github.event.issue.pull_request != '' }}" >> $GITHUB_ENV
            echo "COMMENT_ID=${{ github.event.comment.id }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.comment.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "IS_PR=true" >> $GITHUB_ENV
            echo "COMMENT_ID=${{ github.event.comment.id }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "IS_PR=false" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "IS_PR=true" >> $GITHUB_ENV
          fi

      - name: Check for Aider mention
        id: check-mention
        run: |
          SHOULD_RUN=false
          COMMAND=""
          
          if [[ "${{ env.EVENT_TYPE }}" == "issue_comment" || "${{ env.EVENT_TYPE }}" == "pull_request_review_comment" ]]; then
            if echo "${{ env.COMMENT_BODY }}" | grep -q "@aider"; then
              SHOULD_RUN=true
              COMMAND=$(echo "${{ env.COMMENT_BODY }}" | sed -n "s/.*@aider\s*\(.*\)/\1/p")
            fi
          elif [[ "${{ env.EVENT_TYPE }}" == "issues" ]]; then
            if echo "${{ env.ISSUE_BODY }}" | grep -q "@aider"; then
              SHOULD_RUN=true
              COMMAND=$(echo "${{ env.ISSUE_BODY }}" | sed -n "s/.*@aider\s*\(.*\)/\1/p")
            fi
          elif [[ "${{ env.EVENT_TYPE }}" == "pull_request" ]]; then
            if echo "${{ env.PR_BODY }}" | grep -q "@aider"; then
              SHOULD_RUN=true
              COMMAND=$(echo "${{ env.PR_BODY }}" | sed -n "s/.*@aider\s*\(.*\)/\1/p")
            fi
          fi
          
          echo "SHOULD_RUN=$SHOULD_RUN" >> $GITHUB_ENV
          echo "COMMAND<<EOF" >> $GITHUB_ENV
          echo "$COMMAND" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Setup Docker
        if: env.SHOULD_RUN == 'true'
        run: |
          docker pull paulgauthier/aider

      - name: Create initial response comment
        if: env.SHOULD_RUN == 'true'
        id: initial-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          INITIAL_RESPONSE="🤖 **Aider Bot is processing your request...**

          **Request:** \`${{ env.COMMAND }}\`
          
          ⏳ Setting up environment and analyzing code...
          
          _This comment will be updated with progress and results._"
          
          if [[ "${{ env.IS_PR }}" == "true" ]]; then
            PR_NUMBER="${{ env.PR_NUMBER }}"
            if [[ -z "$PR_NUMBER" ]]; then
              PR_NUMBER="${{ env.ISSUE_NUMBER }}"
            fi
            
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
              -d "{\"body\":$(echo "$INITIAL_RESPONSE" | jq -R -s .)}")
          else
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}/comments" \
              -d "{\"body\":$(echo "$INITIAL_RESPONSE" | jq -R -s .)}")
          fi
          
          RESPONSE_COMMENT_ID=$(echo $RESPONSE | jq -r '.id')
          echo "RESPONSE_COMMENT_ID=$RESPONSE_COMMENT_ID" >> $GITHUB_ENV

      - name: Process with Aider
        if: env.SHOULD_RUN == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AIDER_MODEL: ${{ vars.AIDER_MODEL || 'gpt-4o' }}
          AIDER_CONFIG: ${{ vars.AIDER_CONFIG || '' }}
          AIDER_EDIT_FORMAT: ${{ vars.AIDER_EDIT_FORMAT || 'diff' }}
          AIDER_BASE_URL: ${{ vars.AIDER_BASE_URL || '' }}
          AIDER_API_VERSION: ${{ vars.AIDER_API_VERSION || '' }}
        run: |
          # Function to update the comment
          update_comment() {
            local message="$1"
            curl -s -X PATCH \
              -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.RESPONSE_COMMENT_ID }}" \
              -d "{\"body\":$(echo "$message" | jq -R -s .)}" > /dev/null
          }
          
          # Set up Git config
          git config user.name "Aider Bot"
          git config user.email "aider-bot@github.com"
          
          # Update status
          update_comment "🤖 **Aider Bot is processing your request...**

          **Request:** \`${{ env.COMMAND }}\`
          
          ✅ Environment setup complete
          🔄 Cloning repository and setting up workspace...
          
          _This comment will be updated with progress and results._"
          
          # Create a unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          if [[ "${{ env.IS_PR }}" == "true" ]]; then
            PR_NUMBER="${{ env.PR_NUMBER }}"
            if [[ -z "$PR_NUMBER" ]]; then
              PR_NUMBER="${{ env.ISSUE_NUMBER }}"
            fi
            BRANCH_NAME="aider/pr-${PR_NUMBER}-${TIMESTAMP}"
          else
            BRANCH_NAME="aider/issue-${{ env.ISSUE_NUMBER }}-${TIMESTAMP}"
          fi
          
          # Clone the repository and set up working environment
          TEMPDIR=$(mktemp -d)
          cd $TEMPDIR
          git clone https://x-access-token:${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
          
          # Update status
          update_comment "🤖 **Aider Bot is processing your request...**

          **Request:** \`${{ env.COMMAND }}\`
          
          ✅ Environment setup complete
          ✅ Repository cloned
          🔄 Setting up branch and running Aider...
          
          _This comment will be updated with progress and results._"
          
          # For PR, checkout the PR branch
          if [[ "${{ env.IS_PR }}" == "true" ]]; then
            PR_NUMBER="${{ env.PR_NUMBER }}"
            if [[ -z "$PR_NUMBER" ]]; then
              PR_NUMBER="${{ env.ISSUE_NUMBER }}"
            fi
            
            PR_REF=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
              | jq -r .head.ref)
              
            if [[ "$PR_REF" != "null" && "$PR_REF" != "" ]]; then
              git checkout $PR_REF || git checkout -b $BRANCH_NAME
            else
              git checkout -b $BRANCH_NAME
            fi
          else
            # For issues, create a new branch
            git checkout -b $BRANCH_NAME
          fi

          # Prepare aider command with required flags to avoid permission issues
          AIDER_CMD="--model ${{ env.AIDER_MODEL }} --openai-api-key ${{ env.OPENAI_API_KEY }}"
          
          # Add additional configuration if specified
          if [[ -n "${{ env.AIDER_CONFIG }}" ]]; then
            AIDER_CMD="$AIDER_CMD ${{ env.AIDER_CONFIG }}"
          fi
          
          # Add edit format if specified
          if [[ -n "${{ env.AIDER_EDIT_FORMAT }}" ]]; then
            AIDER_CMD="$AIDER_CMD --edit-format ${{ env.AIDER_EDIT_FORMAT }}"
          fi
          
          # Add base URL if specified
          if [[ -n "${{ env.AIDER_BASE_URL }}" ]]; then
            AIDER_CMD="$AIDER_CMD --openai-api-base ${{ env.AIDER_BASE_URL }}"
          fi
          
          # Add API version if specified
          if [[ -n "${{ env.AIDER_API_VERSION }}" ]]; then
            AIDER_CMD="$AIDER_CMD --openai-api-version ${{ env.AIDER_API_VERSION }}"
          fi
          
          # Create temporary home directory to avoid permission issues
          mkdir -p /tmp/aider_home/.aider
          
          # Update status
          update_comment "🤖 **Aider Bot is processing your request...**

          **Request:** \`${{ env.COMMAND }}\`
          
          ✅ Environment setup complete
          ✅ Repository cloned
          ✅ Branch created: \`$BRANCH_NAME\`
          🔄 Running Aider AI analysis...
          
          _This comment will be updated with progress and results._"
          
          # Run Aider in Docker with proper environment
          set +e
          docker run --rm \
            -v "$(pwd):/app" \
            -v "/tmp/aider_home:/home/aider" \
            -e HOME=/home/aider \
            -e OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} \
            -w /app \
            --user $(id -u):$(id -g) \
            paulgauthier/aider \
            $AIDER_CMD \
            --no-git \
            --yes-always \
            --no-check-update \
            --message "${{ env.COMMAND }}" \
            > aider_output.txt 2>&1
          
          AIDER_EXIT_CODE=$?
          set -e
          
          # Update with results
          if [ $AIDER_EXIT_CODE -eq 0 ]; then
            update_comment "🤖 **Aider Bot is processing your request...**

            **Request:** \`${{ env.COMMAND }}\`
            
            ✅ Environment setup complete
            ✅ Repository cloned
            ✅ Branch created: \`$BRANCH_NAME\`
            ✅ Aider AI analysis complete
            🔄 Processing results and checking for changes...
            
            _This comment will be updated with progress and results._"
          else
            update_comment "🤖 **Aider Bot is processing your request...**

            **Request:** \`${{ env.COMMAND }}\`
            
            ✅ Environment setup complete
            ✅ Repository cloned
            ✅ Branch created: \`$BRANCH_NAME\`
            ❌ Aider AI encountered an error
            
            **Error Output:**
            \`\`\`
            $(cat aider_output.txt | tail -20)
            \`\`\`
            
            _Processing complete with errors._"
            
            # Cleanup and exit
            cd - > /dev/null
            rm -rf $TEMPDIR
            exit 1
          fi
          
          # Check if there are changes to commit
          if git status --porcelain | grep -q '^M\|^A\|^D'; then
            # Changes detected, commit them
            git add .
            git commit -m "Changes by Aider Bot: ${{ env.COMMAND }}"
            
            # Update status
            update_comment "🤖 **Aider Bot is processing your request...**

            **Request:** \`${{ env.COMMAND }}\`
            
            ✅ Environment setup complete
            ✅ Repository cloned
            ✅ Branch created: \`$BRANCH_NAME\`
            ✅ Aider AI analysis complete
            ✅ Changes detected and committed
            🔄 Creating pull request...
            
            _This comment will be updated with progress and results._"
            
            # For issues, create a new PR
            if [[ "${{ env.IS_PR }}" == "false" ]]; then
              git push origin $BRANCH_NAME
              
              # Create a PR
              PR_RESPONSE=$(curl -s -X POST \
                -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/pulls" \
                -d "{
                  \"title\":\"🤖 Aider Bot: Changes for issue #${{ env.ISSUE_NUMBER }}\", 
                  \"body\":\"This PR addresses changes requested in issue #${{ env.ISSUE_NUMBER }} using Aider AI.\\n\\n**Original request:** ${{ env.COMMAND }}\\n\\n**Aider Output:**\\n\\\`\\\`\\\`\\n$(cat aider_output.txt | head -50)\\n\\\`\\\`\\\`\", 
                  \"head\":\"$BRANCH_NAME\", 
                  \"base\":\"main\"
                }")
              
              PR_URL=$(echo $PR_RESPONSE | jq -r '.html_url')
              PR_NUM=$(echo $PR_RESPONSE | jq -r '.number')
                
              # Final success update
              update_comment "🤖 **Aider Bot - Processing Complete!** ✅

              **Request:** \`${{ env.COMMAND }}\`
              
              **Results:**
              - ✅ Aider AI analysis completed successfully
              - ✅ Changes committed to branch: \`$BRANCH_NAME\`
              - ✅ Pull request created: [#$PR_NUM]($PR_URL)
              
              **Aider Output:**
              \`\`\`
              $(cat aider_output.txt | head -30)
              \`\`\`
              
              Please review the pull request and merge when ready!"
              
            else
              # For PRs, push to the new branch and create a PR to the original PR branch
              git push origin $BRANCH_NAME
              
              PR_NUMBER="${{ env.PR_NUMBER }}"
              if [[ -z "$PR_NUMBER" ]]; then
                PR_NUMBER="${{ env.ISSUE_NUMBER }}"
              fi
              
              # Get the original PR's target branch
              TARGET_BRANCH=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
                | jq -r .base.ref)
                
              # Create a PR to the original PR branch
              NEW_PR_RESPONSE=$(curl -s -X POST \
                -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/pulls" \
                -d "{
                  \"title\":\"🤖 Aider Bot: Changes for PR #$PR_NUMBER\", 
                  \"body\":\"This PR contains Aider's changes in response to a request in PR #$PR_NUMBER.\\n\\n**Original request:** ${{ env.COMMAND }}\\n\\n**Aider Output:**\\n\\\`\\\`\\\`\\n$(cat aider_output.txt | head -50)\\n\\\`\\\`\\\`\", 
                  \"head\":\"$BRANCH_NAME\", 
                  \"base\":\"$TARGET_BRANCH\"
                }")
              
              NEW_PR_URL=$(echo $NEW_PR_RESPONSE | jq -r '.html_url')
              NEW_PR_NUM=$(echo $NEW_PR_RESPONSE | jq -r '.number')
              
              # Final success update
              update_comment "🤖 **Aider Bot - Processing Complete!** ✅

              **Request:** \`${{ env.COMMAND }}\`
              
              **Results:**
              - ✅ Aider AI analysis completed successfully
              - ✅ Changes committed to branch: \`$BRANCH_NAME\`
              - ✅ Pull request created: [#$NEW_PR_NUM]($NEW_PR_URL)
              
              **Aider Output:**
              \`\`\`
              $(cat aider_output.txt | head -30)
              \`\`\`
              
              Please review the pull request and merge when ready!"
            fi
          else
            # No changes made
            update_comment "🤖 **Aider Bot - Processing Complete!** ℹ️

            **Request:** \`${{ env.COMMAND }}\`
            
            **Results:**
            - ✅ Aider AI analysis completed successfully
            - ℹ️ No code changes were needed
            
            **Aider Output:**
            \`\`\`
            $(cat aider_output.txt)
            \`\`\`
            
            The request was processed but no file modifications were required."
          fi
          
          # Cleanup
          cd - > /dev/null
          rm -rf $TEMPDIR