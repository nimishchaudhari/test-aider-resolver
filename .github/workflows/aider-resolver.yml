name: Aider Resolver
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  process-with-aider:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.actor, '[bot]') && github.event.comment.user.type != 'Bot' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract event information
        id: extract-event
        run: |
          echo "EVENT_TYPE=${{ github.event_name }}" >> $GITHUB_ENV
          echo "COMMENT_ID=" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.comment.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "IS_PR=${{ github.event.issue.pull_request != '' }}" >> $GITHUB_ENV
            echo "COMMENT_ID=${{ github.event.comment.id }}" >> $GITHUB_ENV
            echo "ISSUE_TITLE<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.issue.title }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.comment.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "IS_PR=true" >> $GITHUB_ENV
            echo "COMMENT_ID=${{ github.event.comment.id }}" >> $GITHUB_ENV
            echo "ISSUE_TITLE<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "IS_PR=false" >> $GITHUB_ENV
            echo "ISSUE_TITLE<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.issue.title }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "IS_PR=true" >> $GITHUB_ENV
            echo "ISSUE_TITLE<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Check for Aider mention
        id: check-mention
        run: |
          SHOULD_RUN=false
          COMMAND=""
          
          if [[ "${{ env.EVENT_TYPE }}" == "issue_comment" || "${{ env.EVENT_TYPE }}" == "pull_request_review_comment" ]]; then
            if echo "${{ env.COMMENT_BODY }}" | grep -q "@aider"; then
              SHOULD_RUN=true
              COMMAND=$(echo "${{ env.COMMENT_BODY }}" | sed -n "s/.*@aider\s*\(.*\)/\1/p")
            fi
          elif [[ "${{ env.EVENT_TYPE }}" == "issues" ]]; then
            if echo "${{ env.ISSUE_BODY }}" | grep -q "@aider"; then
              SHOULD_RUN=true
              COMMAND=$(echo "${{ env.ISSUE_BODY }}" | sed -n "s/.*@aider\s*\(.*\)/\1/p")
            fi
          elif [[ "${{ env.EVENT_TYPE }}" == "pull_request" ]]; then
            if echo "${{ env.PR_BODY }}" | grep -q "@aider"; then
              SHOULD_RUN=true
              COMMAND=$(echo "${{ env.PR_BODY }}" | sed -n "s/.*@aider\s*\(.*\)/\1/p")
            fi
          fi
          
          echo "SHOULD_RUN=$SHOULD_RUN" >> $GITHUB_ENV
          echo "COMMAND<<EOF" >> $GITHUB_ENV
          echo "$COMMAND" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Setup Docker
        if: env.SHOULD_RUN == 'true'
        run: |
          docker pull paulgauthier/aider

      - name: Create initial response comment
        if: env.SHOULD_RUN == 'true'
        id: initial-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          INITIAL_RESPONSE="🤖 **Aider is analyzing your request...**

          **Request:** \`${{ env.COMMAND }}\`
          
          ⏳ Processing...
          
          _This will be updated with my response shortly._"
          
          if [[ "${{ env.IS_PR }}" == "true" ]]; then
            PR_NUMBER="${{ env.PR_NUMBER }}"
            if [[ -z "$PR_NUMBER" ]]; then
              PR_NUMBER="${{ env.ISSUE_NUMBER }}"
            fi
            
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
              -d "{\"body\":$(echo "$INITIAL_RESPONSE" | jq -R -s .)}")
          else
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}/comments" \
              -d "{\"body\":$(echo "$INITIAL_RESPONSE" | jq -R -s .)}")
          fi
          
          RESPONSE_COMMENT_ID=$(echo $RESPONSE | jq -r '.id')
          echo "RESPONSE_COMMENT_ID=$RESPONSE_COMMENT_ID" >> $GITHUB_ENV

      - name: Process with Aider
        if: env.SHOULD_RUN == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AIDER_MODEL: ${{ vars.AIDER_MODEL || 'gpt-4o' }}
          AIDER_CONFIG: ${{ vars.AIDER_CONFIG || '' }}
          AIDER_EDIT_FORMAT: ${{ vars.AIDER_EDIT_FORMAT || 'diff' }}
          AIDER_BASE_URL: ${{ vars.AIDER_BASE_URL || '' }}
          AIDER_API_VERSION: ${{ vars.AIDER_API_VERSION || '' }}
        run: |
          # Function to update the comment
          update_comment() {
            local message="$1"
            curl -s -X PATCH \
              -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.RESPONSE_COMMENT_ID }}" \
              -d "{\"body\":$(echo "$message" | jq -R -s .)}" > /dev/null
          }
          
          # Set up Git config
          git config user.name "Aider Bot"
          git config user.email "aider-bot@github.com"
          
          # Create a unique branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          if [[ "${{ env.IS_PR }}" == "true" ]]; then
            PR_NUMBER="${{ env.PR_NUMBER }}"
            if [[ -z "$PR_NUMBER" ]]; then
              PR_NUMBER="${{ env.ISSUE_NUMBER }}"
            fi
            BRANCH_NAME="aider/pr-${PR_NUMBER}-${TIMESTAMP}"
          else
            BRANCH_NAME="aider/issue-${{ env.ISSUE_NUMBER }}-${TIMESTAMP}"
          fi
          
          # Clone the repository and set up working environment
          TEMPDIR=$(mktemp -d)
          cd $TEMPDIR
          git clone https://x-access-token:${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
          
          # Record initial state
          git status > before_status.txt
          ls -la > before_files.txt
          
          # For PR, checkout the PR branch
          if [[ "${{ env.IS_PR }}" == "true" ]]; then
            PR_NUMBER="${{ env.PR_NUMBER }}"
            if [[ -z "$PR_NUMBER" ]]; then
              PR_NUMBER="${{ env.ISSUE_NUMBER }}"
            fi
            
            PR_REF=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
              | jq -r .head.ref)
              
            if [[ "$PR_REF" != "null" && "$PR_REF" != "" ]]; then
              git checkout $PR_REF || git checkout -b $BRANCH_NAME
            else
              git checkout -b $BRANCH_NAME
            fi
          else
            # For issues, create a new branch
            git checkout -b $BRANCH_NAME
          fi

          # Prepare aider command
          AIDER_CMD="--model ${{ env.AIDER_MODEL }} --openai-api-key ${{ env.OPENAI_API_KEY }}"
          
          if [[ -n "${{ env.AIDER_CONFIG }}" ]]; then
            AIDER_CMD="$AIDER_CMD ${{ env.AIDER_CONFIG }}"
          fi
          
          if [[ -n "${{ env.AIDER_EDIT_FORMAT }}" ]]; then
            AIDER_CMD="$AIDER_CMD --edit-format ${{ env.AIDER_EDIT_FORMAT }}"
          fi
          
          if [[ -n "${{ env.AIDER_BASE_URL }}" ]]; then
            AIDER_CMD="$AIDER_CMD --openai-api-base ${{ env.AIDER_BASE_URL }}"
          fi
          
          if [[ -n "${{ env.AIDER_API_VERSION }}" ]]; then
            AIDER_CMD="$AIDER_CMD --openai-api-version ${{ env.AIDER_API_VERSION }}"
          fi
          
          # Create proper home directory
          CONTAINER_HOME="/tmp/aider_home"
          mkdir -p "$CONTAINER_HOME/.aider"
          touch "$CONTAINER_HOME/.aider/oauth-keys.env"
          chmod 644 "$CONTAINER_HOME/.aider/oauth-keys.env"
          
          # Create context for Aider
          CONTEXT_TYPE=""
          CONTEXT_NUMBER=""
          if [[ "${{ env.IS_PR }}" == "true" ]]; then
            CONTEXT_TYPE="Pull Request"
            CONTEXT_NUMBER="${{ env.PR_NUMBER }}"
            if [[ -z "$CONTEXT_NUMBER" ]]; then
              CONTEXT_NUMBER="${{ env.ISSUE_NUMBER }}"
            fi
          else
            CONTEXT_TYPE="Issue"
            CONTEXT_NUMBER="${{ env.ISSUE_NUMBER }}"
          fi
          
          # Enhanced prompt for Aider
          ENHANCED_PROMPT="You are helping with GitHub $CONTEXT_TYPE #$CONTEXT_NUMBER in repository ${{ github.repository }}.

          User's request: ${{ env.COMMAND }}

          Please implement the requested changes. If you need to create files, create them. If you need to modify files, modify them. Focus on the actual implementation rather than just explaining what to do."
          
          # Run Aider
          set +e
          docker run --rm \
            -v "$(pwd):/app" \
            -v "$CONTAINER_HOME:/home/aider" \
            -e HOME=/home/aider \
            -e OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} \
            -w /app \
            --user $(id -u):$(id -g) \
            paulgauthier/aider \
            $AIDER_CMD \
            --no-git \
            --yes-always \
            --no-check-update \
            --env-file /dev/null \
            --message "$ENHANCED_PROMPT" \
            > aider_output.txt 2>&1
          
          AIDER_EXIT_CODE=$?
          set -e
          
          # Record final state
          git status > after_status.txt
          ls -la > after_files.txt
          
          # Detect changes more accurately
          git add . 2>/dev/null || true
          CHANGES_DETECTED=false
          CHANGED_FILES=""
          NEW_FILES=""
          MODIFIED_FILES=""
          
          # Check for any changes
          if ! git diff --cached --quiet 2>/dev/null; then
            CHANGES_DETECTED=true
            CHANGED_FILES=$(git diff --cached --name-only 2>/dev/null || echo "")
            NEW_FILES=$(git diff --cached --name-only --diff-filter=A 2>/dev/null || echo "")
            MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M 2>/dev/null || echo "")
          fi
          
          # Extract meaningful response from Aider output
          AIDER_RESPONSE=""
          if [ -f aider_output.txt ]; then
            # Extract the main conversation part (between the header and the final statistics)
            AIDER_RESPONSE=$(cat aider_output.txt | \
              sed -n '/^To /,/^Tokens:/p' | \
              sed '1d;$d' | \
              grep -v "^Applied edit" | \
              grep -v "^python3" | \
              grep -v "^Warning:" | \
              grep -v "^────" | \
              sed '/^$/d' | \
              head -15)
            
            # If that didn't work, try a different approach
            if [[ -z "$AIDER_RESPONSE" ]]; then
              AIDER_RESPONSE=$(cat aider_output.txt | \
                grep -A 20 -E "(Here|This|To address|I'll|Let me)" | \
                grep -v "Applied edit" | \
                grep -v "Tokens:" | \
                grep -v "Cost:" | \
                head -10)
            fi
            
            # Fallback: use any substantial lines
            if [[ -z "$AIDER_RESPONSE" ]]; then
              AIDER_RESPONSE=$(cat aider_output.txt | \
                grep -v "Warning:" | \
                grep -v "Aider v" | \
                grep -v "Main model:" | \
                grep -v "https://" | \
                grep -v "Applied edit" | \
                grep -v "Tokens:" | \
                grep -E ".{20,}" | \
                head -8)
            fi
          fi
          
          # Process results and create response
          if [ $AIDER_EXIT_CODE -eq 0 ]; then
            if [ "$CHANGES_DETECTED" = true ]; then
              # Commit the changes
              git commit -m "🤖 Aider: ${{ env.COMMAND }}" || true
              
              # Create file lists for display
              NEW_FILES_LIST=""
              MODIFIED_FILES_LIST=""
              
              if [[ -n "$NEW_FILES" ]]; then
                NEW_FILES_LIST=$(echo "$NEW_FILES" | sed 's/^/- ✅ Created: /')
              fi
              
              if [[ -n "$MODIFIED_FILES" ]]; then
                MODIFIED_FILES_LIST=$(echo "$MODIFIED_FILES" | sed 's/^/- ✏️ Modified: /')
              fi
              
              # For issues, create a new PR
              if [[ "${{ env.IS_PR }}" == "false" ]]; then
                git push origin $BRANCH_NAME
                
                PR_RESPONSE=$(curl -s -X POST \
                  -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls" \
                  -d "{
                    \"title\":\"🤖 Aider: ${{ env.COMMAND }}\", 
                    \"body\":\"Resolves #${{ env.ISSUE_NUMBER }}\\n\\nImplemented by Aider AI based on the request: ${{ env.COMMAND }}\", 
                    \"head\":\"$BRANCH_NAME\", 
                    \"base\":\"main\"
                  }")
                
                PR_URL=$(echo $PR_RESPONSE | jq -r '.html_url')
                PR_NUM=$(echo $PR_RESPONSE | jq -r '.number')
                
                FINAL_RESPONSE="## 🤖 Aider's Response

I've successfully implemented your request: **${{ env.COMMAND }}**

### 📝 What I Did:
$AIDER_RESPONSE

### 📁 Files Changed:
$NEW_FILES_LIST
$MODIFIED_FILES_LIST

### 🚀 Next Steps:
I've created pull request [#$PR_NUM]($PR_URL) with the changes. Please review and merge when ready!

<details>
<summary>🔍 Technical Details</summary>

\`\`\`
$(cat aider_output.txt)
\`\`\`

</details>"
                
              else
                # For PRs
                git push origin $BRANCH_NAME
                
                PR_NUMBER="${{ env.PR_NUMBER }}"
                if [[ -z "$PR_NUMBER" ]]; then
                  PR_NUMBER="${{ env.ISSUE_NUMBER }}"
                fi
                
                TARGET_BRANCH=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
                  | jq -r .base.ref)
                  
                NEW_PR_RESPONSE=$(curl -s -X POST \
                  -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/pulls" \
                  -d "{
                    \"title\":\"🤖 Aider: ${{ env.COMMAND }}\", 
                    \"body\":\"Related to PR #$PR_NUMBER\\n\\nImplemented by Aider AI based on the request: ${{ env.COMMAND }}\", 
                    \"head\":\"$BRANCH_NAME\", 
                    \"base\":\"$TARGET_BRANCH\"
                  }")
                
                NEW_PR_URL=$(echo $NEW_PR_RESPONSE | jq -r '.html_url')
                NEW_PR_NUM=$(echo $NEW_PR_RESPONSE | jq -r '.number')
                
                FINAL_RESPONSE="## 🤖 Aider's Response

I've successfully implemented your request: **${{ env.COMMAND }}**

### 📝 What I Did:
$AIDER_RESPONSE

### 📁 Files Changed:
$NEW_FILES_LIST
$MODIFIED_FILES_LIST

### 🚀 Next Steps:
I've created pull request [#$NEW_PR_NUM]($NEW_PR_URL) with the changes. Please review and merge when ready!

<details>
<summary>🔍 Technical Details</summary>

\`\`\`
$(cat aider_output.txt)
\`\`\`

</details>"
              fi
            else
              # No changes made
              FINAL_RESPONSE="## 🤖 Aider's Response

I've analyzed your request: **${{ env.COMMAND }}**

### 💭 My Response:
$AIDER_RESPONSE

### ℹ️ Note:
No file changes were needed for this request. The information above should help with your question or provide the guidance you need.

<details>
<summary>🔍 Technical Details</summary>

\`\`\`
$(cat aider_output.txt)
\`\`\`

</details>"
            fi
          else
            # Error occurred
            FINAL_RESPONSE="## 🤖 Aider's Response

I encountered an error while processing your request: **${{ env.COMMAND }}**

### ⚠️ Error Details:
$(cat aider_output.txt | tail -10 | sed 's/^/- /')

Please check the technical details below or try rephrasing your request.

<details>
<summary>🔍 Technical Details</summary>

\`\`\`
$(cat aider_output.txt)
\`\`\`

</details>"
          fi
          
          # Update the comment with the final response
          update_comment "$FINAL_RESPONSE"
          
          # Cleanup
          cd - > /dev/null
          rm -rf $TEMPDIR
          rm -rf $CONTAINER_HOME
